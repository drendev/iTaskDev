// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASEBETA")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean? @default(true)
  image         String?
  role          UserRole @default(USER)

  accounts      Account[]
  workspaces    Workspace[]
  members       Member[]
  pending       PendingMember[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Workspace {
  id        String   @id @default(cuid())
  joinCode  String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isPrivate   Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  members Member[]
  pending PendingMember[]

  @@map("workspaces")
  @@index([userId])
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(MEMBER)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
}

model PendingMember {
  id String @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])

  @@map("pending_members")
}