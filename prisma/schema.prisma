// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Test redis

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASEBETA")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean? @default(true)
  image         String?
  role          UserRole @default(USER)

  accounts      Account[]
  workspaces    Workspace[]
  members       Member[]
  pending       PendingMember[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsnReceived Conversation[] @relation("UserTwo")

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Workspace {
  id        String   @id @default(cuid())
  joinCode  String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isPrivate   Boolean  @default(true)

  sdlc String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  members Member[]
  pending PendingMember[]
  info ProjectInformation[]

  sdlcAi ProjectSdlc[]

  chat ProjectChat[]
  tasks Task[]

  @@map("workspaces")
  @@index([userId])
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(MEMBER)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workLoad Int?

  chat ProjectChat[]
  tasks TaskMember[]

  @@index([userId])
  @@index([workspaceId])
}

model PendingMember {
  id String @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])

  @@map("pending_members")
}

model ProjectChat {
  id  String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  projectId String
  workspace Workspace @relation(fields: [projectId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([projectId])
}

model Conversation {
  id String @id @default(uuid())

  userOneId String
  userOne User @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo User @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([userOneId, userTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([userId])
  @@index([conversationId])
}

model Task {
  id String @id @default(uuid())
  content String @db.Text

  members TaskMember[]

  projectId String
  workspace Workspace @relation(fields: [projectId], references: [id], onDelete: Cascade)

  DateAssigned DateTime?
  DateDue DateTime?
  DateCompleted DateTime?

  Intensity Int?
  Priority Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model TaskMember {
  id String @id @default(uuid())

  taskId String
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([memberId])
}

model ProjectInformation {
  id String @id @default(uuid())

  workspaceId String @unique
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  description String @db.Text
  dueDate DateTime
  complexFeatures Boolean @default(false)
  clientInvolvement Boolean @default(false)
  deployment Boolean @default(false)
  testing String @db.Text
  tasks Int
  members String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([workspaceId])
}

model ProjectSdlc {
  id String @id @default(uuid())

  workspaceId String @unique
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  timeline String @db.Text
  teamSize String @db.Text
  complexFeatures String @db.Text
  clientInvolvement String @db.Text
  scopeAndRequirements String @db.Text
  resourceAvailability String @db.Text
  qualityAssurance String @db.Text
  deployment String @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}